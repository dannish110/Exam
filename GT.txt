!pip install gambit
!pip install nashpy
____________________________________________________________________________
# Exp 1  nash eql for 2 player game

import nashpy as nash
import numpy as np

# Define the payoff matrices for two players
A = np.array([[-1, -3], [0, -2]])  # Player 1's payoffs
B = np.array([[-1, 0], [-3, -2]])  # Player 2's payoffs

# Create the game
game = nash.Game(A, B)

# Compute Nash Equilibria
equilibria = list(game.support_enumeration())

print("Nash Equilibria:", equilibria)
____________________________________________________________________________

# Exp 2 Saddle point 2*2

import numpy as np

def find_saddle_point(matrix):
    min_row = np.min(matrix, axis=1)  # Min values in each row
    max_col = np.max(matrix, axis=0)  # Max values in each column

    for i in range(2):
        for j in range(2):
            if matrix[i, j] == min_row[i] == max_col[j]:
                return (i, j, matrix[i, j])  # (row, col, value)

    return "No saddle point"

# Example
game_matrix = np.array([[3, 7], [2, 5]])
print(find_saddle_point(game_matrix))
____________________________________________________________________________

# Exp 3 NFG

class NormalFormGame:
    def __init__(self, p1_matrix, p2_matrix):
        self.p1_matrix = p1_matrix  # Payoff matrix for Player 1
        self.p2_matrix = p2_matrix  # Payoff matrix for Player 2

    def get_payoffs(self, strategy1, strategy2):
        """Returns payoffs for both players given their chosen strategies."""
        return self.p1_matrix[strategy1][strategy2], self.p2_matrix[strategy1][strategy2]

# Example: A 2x2 Normal Form Game
p1_matrix = [[3, 1], [0, 2]]  # Player 1 payoffs
p2_matrix = [[2, 0], [1, 3]]  # Player 2 payoffs

game = NormalFormGame(p1_matrix, p2_matrix)

# Get payoffs for a strategy pair (0,1) -> (Row 0, Column 1)
print("Payoffs at (0,1):", game.get_payoffs(0, 1))
____________________________________________________________________________

# Exp 4 	Write a program using python library(gambit) to find nash Equilibrium.

import nashpy as nash
import numpy as np
A = np.array([[1, -1], [-1, 1]])
matching_pennies = nash.Game(A)

equilibria = matching_pennies.support_enumeration()
for eq in equilibria:
    print(eq)
____________________________________________________________________________


# Exp 5 	Write a program in python to form a game representation in Tree like form.

class GameTreeNode:
    def __init__(self, state, value=None):
        self.state = state  # Represents the game state
        self.value = value  # Evaluation value (useful for AI)
        self.children = []  # List of child nodes

    def add_child(self, child_node):
        """Adds a child node to the current node."""
        self.children.append(child_node)

    def display(self, level=0):
        """Recursively displays the tree structure."""
        print(" " * (level * 4) + f"State: {self.state}, Value: {self.value}")
        for child in self.children:
            child.display(level + 1)


# Example: Creating a simple game tree
if __name__ == "__main__":
    root = GameTreeNode("Start")

    node1 = GameTreeNode("Move 1")
    node2 = GameTreeNode("Move 2")

    node1_1 = GameTreeNode("Move 1-1", value=10)
    node1_2 = GameTreeNode("Move 1-2", value=-5)
    node2_1 = GameTreeNode("Move 2-1", value=7)

    root.add_child(node1)
    root.add_child(node2)

    node1.add_child(node1_1)
    node1.add_child(node1_2)
    node2.add_child(node2_1)

    # Display the tree
    root.display()

____________________________________________________________________________
# Exp 6 	Design Bayesian Game concept in Game theory using python
import pygambit

# Create a Bayesian game with two players, each with two types
game = pygambit.Game.new_table([2, 2, 2, 2])  # 2 players, each with 2 types, each type has 2 strategies

# Label players
game.players[0].label = "Player 1"
game.players[1].label = "Player 2"

# Assign type probabilities (beliefs)
beliefs = {
    "Player 1": [0.5, 0.5],  # Player 1 believes Player 2's types are equally likely
    "Player 2": [0.5, 0.5]   # Player 2 believes Player 1's types are equally likely
}

# Assign payoffs (indexed by (type1, type2, strategy1, strategy2))
payoffs = {
    (0, 0, 0, 0): (3, 2),  # (Player 1 Type 0, Player 2 Type 0, Strategy 0, Strategy 0)
    (0, 0, 0, 1): (1, 4),
    (0, 0, 1, 0): (5, 1),
    (0, 0, 1, 1): (2, 3),

    (0, 1, 0, 0): (4, 3),
    (0, 1, 0, 1): (2, 2),
    (0, 1, 1, 0): (1, 5),
    (0, 1, 1, 1): (3, 4),

    (1, 0, 0, 0): (2, 1),
    (1, 0, 0, 1): (3, 5),
    (1, 0, 1, 0): (4, 2),
    (1, 0, 1, 1): (1, 3),

    (1, 1, 0, 0): (3, 4),
    (1, 1, 0, 1): (5, 2),
    (1, 1, 1, 0): (1, 3),
    (1, 1, 1, 1): (2, 1),
}

# Assign payoffs to Gambit game
for (t1, t2, s1, s2), (p1, p2) in payoffs.items():
    game[t1, t2, s1, s2][game.players[0]] = p1  # Payoff for Player 1
    game[t1, t2, s1, s2][game.players[1]] = p2  # Payoff for Player 2

# Compute Bayesian Nash Equilibria
solver = pygambit.nash.enumpure_solve(game)
print("Bayesian Nash Equilibria:")
for eq in solver.equilibria:
    print(eq)

____________________________________________________________________________
# Exp 7 zero sum game

import numpy as np
from scipy.optimize import linprog

def zero_sum_game_solver(payoff_matrix):
    num_strategies = payoff_matrix.shape[0]  # Number of strategies for Player 1

    # LP variables: [v, p1_strategy_probs...]
    # Objective: maximize v (game value)
    # linprog minimizes, so minimize -v => c = [-1, 0, 0, ..., 0]
    c = [-1] + [0] * num_strategies

    # Inequality constraints: for each column j of payoff_matrix
    # sum_i p_i * A_ij >= v  <=>  -v + sum_i p_i * A_ij >= 0
    # Represented as -v + A * p >= 0  <=>  -A * p + v <= 0 for linprog
    # We transpose payoff_matrix and multiply by -1 to get A_ub and b_ub.
    A_ub = np.hstack((
        -np.ones((num_strategies, 1)),  # Coefficient of -v for each constraint
        payoff_matrix
    ))
    b_ub = np.zeros(num_strategies)

    # Equality constraint: sum of probabilities = 1
    A_eq = [[0] + [1] * num_strategies]
    b_eq = [1]

    # Bounds: v is unrestricted, probabilities between 0 and 1
    bounds = [(None, None)] + [(0, 1)] * num_strategies

    # Solve LP
    res = linprog(c, A_ub=A_ub, b_ub=b_ub, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')

    if res.success:
        v = 1 / res.x[0]  # Game value
        strategy = res.x[1:] * v  # Scale probabilities to sum to 1
        return v, strategy
    else:
        return None, None

# Example usage with a 2x2 payoff matrix for Player 1
payoff_matrix = np.array([
    [3, -1],
    [5,  2]
])

value, strategy = zero_sum_game_solver(payoff_matrix)
if strategy is not None:
    print(f"Game Value: {value:.2f}")
    print(f"Optimal Mixed Strategy for Player 1: {np.round(strategy, 2)}")
else:
    print("No optimal strategy found.")

____________________________________________________________________________

# Exp 8  python code to develop model for first price auction and second price auction

import random
from abc import ABC, abstractmethod

class Auction(ABC):
    def __init__(self, bidders):
        self.bidders = bidders
        self.winner = None
        self.final_price = None

    @abstractmethod
    def conduct_auction(self):
        pass

class FirstPriceSealedBidAuction(Auction):
    def conduct_auction(self):
        highest_bidder = max(self.bidders, key=lambda b: b['bid'])
        self.winner = highest_bidder
        self.final_price = highest_bidder['bid']
        return self.winner, self.final_price

class SecondPriceSealedBidAuction(Auction):
    def conduct_auction(self):
        sorted_bidders = sorted(self.bidders, key=lambda b: b['bid'], reverse=True)
        self.winner = sorted_bidders[0]
        self.final_price = (
            sorted_bidders[1]['bid'] if len(sorted_bidders) > 1 else sorted_bidders[0]['bid']
        )
        return self.winner, self.final_price

# Example Usage
if __name__ == "__main__":
    bidders = [
        {'name': 'Alice', 'bid': 80},
        {'name': 'Bob', 'bid': 110},
        {'name': 'Charlie', 'bid': 85}
    ]

    # First-Price Auction
    first_price_auction = FirstPriceSealedBidAuction(bidders)
    winner, price = first_price_auction.conduct_auction()
    print(f"First-Price Auction Winner: {winner['name']} at price ${price}")

    # Second-Price Auction
    second_price_auction = SecondPriceSealedBidAuction(bidders)
    winner, price = second_price_auction.conduct_auction()
    print(f"Second-Price Auction Winner: {winner['name']} at price ${price}")

____________________________________________________________________________
# EXP 9 PYTHON Code to apply evolutionary game theory concept

import numpy as np
import matplotlib.pyplot as plt

# Define the payoff matrix for a two-strategy game
A = np.array([
    [3, 0],  # Payoff when both choose strategy 1
    [5, 1]   # Payoff when one chooses strategy 1, the other strategy 2
])

# Replicator dynamics function
def replicator_dynamics(x, A, timesteps=100, dt=0.01):
    """
    Simulate the evolution of strategy fractions in a population.

    Parameters:
    x : np.array
        Initial strategy distribution (e.g., [0.5, 0.5])
    A : np.array
        Payoff matrix
    timesteps : int
        Number of iterations
    dt : float
        Step size for time evolution

    Returns:
    np.array
        History of strategy distributions over time
    """
    x_history = [x]

    for _ in range(timesteps):
        fitness = A @ x  # Compute fitness of each strategy
        avg_fitness = np.dot(x, fitness)  # Compute average fitness
        x = x + dt * (x * (fitness - avg_fitness))  # Replicator equation
        x = np.clip(x, 0, 1)  # Ensure values remain valid
        x /= np.sum(x)  # Normalize to sum to 1
        x_history.append(x.copy())

    return np.array(x_history)

# Initial strategy distribution (50% each strategy)
x0 = np.array([0.5, 0.5])

# Simulate evolution
evolution = replicator_dynamics(x0, A, timesteps=500, dt=0.01)

# Plot the results
plt.plot(evolution[:, 0], label="Strategy 1")
plt.plot(evolution[:, 1], label="Strategy 2")
plt.xlabel("Time Steps")
plt.ylabel("Strategy Frequency")
plt.title("Evolutionary Game Theory - Replicator Dynamics")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
____________________________________________________________________________

# Exp 10: Python code to understand Cooperative Games

import itertools
import math  # <-- Correct module for factorial

def shapley_value(players, coalition_values):
    """
    Compute the Shapley value for each player in a cooperative game.

    :param players: List of players
    :param coalition_values: Dictionary with coalition tuples as keys and their values as values
    :return: Dictionary of Shapley values for each player
    """
    n = len(players)
    shapley_values = {player: 0 for player in players}

    for player in players:
        for coalition in itertools.combinations(players, n):
            if player in coalition:
                S = tuple(p for p in coalition if p != player)

                # Compute marginal contribution
                weight = (math.factorial(len(S)) * math.factorial(n - len(S) - 1)) / math.factorial(n)
                marginal_contribution = coalition_values.get(coalition, 0) - coalition_values.get(S, 0)

                shapley_values[player] += weight * marginal_contribution

    return shapley_values

# Example: Three-player cooperative game
players = ['A', 'B', 'C']
coalition_values = {
    (): 0,
    ('A',): 1,
    ('B',): 2,
    ('C',): 3,
    ('A', 'B'): 5,
    ('A', 'C'): 6,
    ('B', 'C'): 8,
    ('A', 'B', 'C'): 10
}

shapley_vals = shapley_value(players, coalition_values)

print("Shapley Values:")
for player, value in shapley_vals.items():
    print(f"Player {player}: {round(value, 2)}")

____________________________________________________________________________
# EXP 11 VCGAuction python code to implement mechanism of design in game theory

class VCGAuction:

    def __init__(self, bidders):
        """
        bidders: dict of {agent_name: value}
        """
        self.bidders = bidders
        self.winner = None
        self.payments = {}

    def run_auction(self):
        # Sort bidders by their value
        sorted_bidders = sorted(self.bidders.items(), key=lambda x: x[1], reverse=True)
        self.winner = sorted_bidders[0][0]
        second_price = sorted_bidders[1][1] if len(sorted_bidders) > 1 else 0

        # VCG payment rule: winner pays the externality imposed (second highest value)
        for bidder in self.bidders:
            if bidder == self.winner:
                self.payments[bidder] = second_price
            else:
                self.payments[bidder] = 0

    def get_result(self):
        return {
            'winner': self.winner,
            'payments': self.payments
        }

# Example usage
if __name__ == "__main__":
    bidders = {
        'Alice': 100,
        'Bob': 80,
        'Charlie': 60
    }

    auction = VCGAuction(bidders)
    auction.run_auction()
    result = auction.get_result()

    print("Winner:", result['winner'])
    print("Payments:")
    for bidder, payment in result['payments'].items():
        print(f" {bidder}: ${payment}")

____________________________________________________________________________

#  EXP 12 Develop a game theory project using python Prisoners Dillemma

import tkinter as tk
from tkinter import ttk
import random

# Payoff matrix
PAYOFFS = {
    ('C', 'C'): (3, 3),
    ('C', 'D'): (0, 5),
    ('D', 'C'): (5, 0),
    ('D', 'D'): (1, 1)
}

# Strategy functions
def always_cooperate(_, __):
    return 'C'

def always_defect(_, __):
    return 'D'

def tit_for_tat(my_history, opp_history):
    if not opp_history:
        return 'C'
    return opp_history[-1]

def random_strategy(_, __):
    return random.choice(['C', 'D'])

STRATEGIES = {
    'Always Cooperate': always_cooperate,
    'Always Defect': always_defect,
    'Tit for Tat': tit_for_tat,
    'Random': random_strategy
}

class PrisonersDilemmaGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Prisoner's Dilemma Game")

        # Histories and scores
        self.player_history = []
        self.cpu_history = []
        self.player_score = 0
        self.cpu_score = 0

        # GUI Components
        self.create_widgets()

    def create_widgets(self):
        # Dropdown for player strategy
        tk.Label(self.root, text="Select Your Strategy:").pack()
        self.strategy_var = tk.StringVar(value='Tit for Tat')
        self.strategy_dropdown = ttk.Combobox(
            self.root, textvariable=self.strategy_var,
            values=list(STRATEGIES.keys()), state="readonly"
        )
        self.strategy_dropdown.pack()

        # CPU strategy display
        self.cpu_label = tk.Label(self.root, text="CPU Strategy: Random")
        self.cpu_label.pack()

        # Play button
        self.play_button = tk.Button(self.root, text="Play Next Round",
                                     command=self.play_round)
        self.play_button.pack(pady=10)

        # History and score display
        self.result_text = tk.Text(self.root, height=10, width=50, state='disabled')
        self.result_text.pack(pady=5)

        # Reset button
        self.reset_button = tk.Button(self.root, text="Reset Game",
                                      command=self.reset_game)
        self.reset_button.pack()

    def play_round(self):
        # Get selected player strategy function
        player_strategy = STRATEGIES[self.strategy_var.get()]
        cpu_strategy = random_strategy  # fixed CPU strategy

        # Get moves
        player_move = player_strategy(self.player_history, self.cpu_history)
        cpu_move = cpu_strategy(self.cpu_history, self.player_history)

        # Get payoffs
        payoff_player, payoff_cpu = PAYOFFS[(player_move, cpu_move)]

        # Update history and scores
        self.player_history.append(player_move)
        self.cpu_history.append(cpu_move)
        self.player_score += payoff_player
        self.cpu_score += payoff_cpu

        # Update text box
        self.result_text.config(state='normal')
        self.result_text.insert(tk.END,
            f"Round {len(self.player_history)}: You - {player_move}, CPU - {cpu_move}\n")
        self.result_text.insert(tk.END,
            f"Scores → You: {self.player_score} | CPU: {self.cpu_score}\n\n")
        self.result_text.config(state='disabled')

    def reset_game(self):
        self.player_history.clear()
        self.cpu_history.clear()
        self.player_score = 0
        self.cpu_score = 0
        self.result_text.config(state='normal')
        self.result_text.delete(1.0, tk.END)
        self.result_text.config(state='disabled')

# Run GUI
if __name__ == "__main__":
    root = tk.Tk()
    game = PrisonersDilemmaGUI(root)
    root.mainloop()

____________________________________________________________________________

# EXP 13 Bargaining model

import random

TOTAL_AMOUNT = 100
DISCOUNT_FACTOR = 0.9  # Value of money decreases each round

def bargaining_game():
    global TOTAL_AMOUNT  # Declare before using or modifying TOTAL_AMOUNT

    round_num = 1
    proposer = 'A'
    responder = 'B'

    while True:
        print(f"\nRound {round_num} - {proposer} makes an offer to {responder}")

        # Proposer makes an offer
        offer_to_A = random.randint(0, TOTAL_AMOUNT)
        offer_to_B = TOTAL_AMOUNT - offer_to_A

        if proposer == 'B':
            offer_to_A, offer_to_B = offer_to_B, offer_to_A

        print(f"Offer: A gets ${offer_to_A}, B gets ${offer_to_B}")

        # Responder decides (simulate acceptance probability)
        acceptance_threshold = 40  # Responder wants at least $40
        responder_share = offer_to_B if responder == 'B' else offer_to_A

        if responder_share >= acceptance_threshold:
            print(f"{responder} accepts the offer!")
            print(f"✅ Final Deal: A gets ${offer_to_A}, B gets ${offer_to_B}")
            break
        else:
            print(f"{responder} rejects the offer.")

        round_num += 1

        # Apply discount
        TOTAL_AMOUNT = int(TOTAL_AMOUNT * DISCOUNT_FACTOR)

        # Swap roles
        proposer, responder = responder, proposer

# Run the game
if __name__ == "__main__":
    print("Bargaining Game: Split $100 between Player A and Player B")
    bargaining_game()
